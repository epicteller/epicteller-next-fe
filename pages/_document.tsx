import Document, { DocumentContext, Head, Html, Main, NextScript } from 'next/document';
import { ServerStyleSheets } from '@mui/styles';

class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const styledComponentSheet = new ServerStyleSheets();
    const materialSheets = new ServerStyleSheets();
    const originalRenderPage = ctx.renderPage;
    ctx.renderPage = () => originalRenderPage({
      enhanceApp: (App) => (props) => styledComponentSheet.collect(materialSheets.collect(<App {...props} />)),
    });
    const initialProps = await Document.getInitialProps(ctx);
    return {
      ...initialProps,
      styles: (
        <>
          {initialProps.styles}
          {materialSheets.getStyleElement()}
          {styledComponentSheet.getStyleElement()}
        </>
      ),
    };
  }

  render() {
    return (
      <Html lang="zh">
        <Head>
          <link rel="icon" href="/favicon.ico" />
          <link rel="preload" href={`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/me`} as="fetch" crossOrigin="true" />
          <meta charSet="utf-8" />
          <meta name="theme-color" content="#000000" />
          <meta name="description" content="Generated by create next app" />
          <meta name="apple-mobile-web-app-capable" content="yes" />
          <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
          <meta name="apple-mobile-web-app-title" content="Epicteller" />
          <link rel="apple-touch-icon" href="/icon512.png" />
          <link rel="apple-touch-icon" sizes="512x512" href="/icon512.png" />
          <link rel="apple-touch-icon" sizes="1024x1024" href="/icon1024.png" />
          <link rel="apple-touch-icon" sizes="1536x1536" href="/icon1536.png" />
          <link rel="manifest" href="/manifest.json" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;
